/*
 * Copyright 2016-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license.
 */

import org.jetbrains.kotlin.PerformanceTools

PerformanceTools.addTimeListener(project)

def createReport(linkTaskName, perfRun, target) {
    def compileTime = PerformanceTools.getCompileTime(["compileKotlin${target}".toString(), linkTaskName], perfRun.state.failure == null)
    new File(buildDir, nativeReport).write(compileTime)
}

kotlin.targets.each {
    if (it.platformType.name == "native") {
        def target = ""
        it.konanTarget.name.split("_").each { word -> target += word.capitalize() }
        def linkTaskName = it.binaries.getTest("DEBUG").linkTaskName

        def perfRun = tasks.create("perfDebug$target") { task ->
            task.dependsOn("$linkTaskName")
            task.group = "Kotlin/Native Benchmarking"
            task.description = "Runs compile time benchmarks for Kotlin/Native."
        }
        def report = tasks.create("perfDebugReport$target") { task ->
            task.group = "Kotlin/Native Benchmarking"
            task.description = "Report results of compile time benchmarks for Kotlin/Native."
            doLast {
                createReport(linkTaskName, perfRun, target)
            }
            perfRun.finalizedBy(task)
        }

        tasks.create("perfFailureReport$target") { task ->
            onlyIf {
                //project.getTasksByName("compileKotlin${target}", false)[0].state.failure != null ||
                        project.getTasksByName(linkTaskName, false)[0].state.failure != null
            }
            task.group = "Kotlin/Native Benchmarking"
            task.description = "Report results of compile time benchmarks for Kotlin/Native in case of failure."
            doLast {
                createReport(linkTaskName, perfRun, target)
            }
            project.getTasksByName(linkTaskName, false)[0].finalizedBy(task)
            //project.getTasksByName("compileKotlin${target}", true)[0].finalizedBy(task)
        }
    }
}
